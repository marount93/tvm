Symbol Outputs:
	output[0]=softmax(0)
Variable:data
Variable:conv1_weight
--------------------
Op:conv2d, Name=conv1
Inputs:
	arg[0]=data(0) version=0
	arg[1]=conv1_weight(0) version=0
Attrs:
	channels=20
	kernel_size=(5, 5)
	padding=(1, 1)
	strides=(1, 1)
	use_bias=False
--------------------
Op:tanh, Name=tanh1
Inputs:
	arg[0]=conv1(0)
--------------------
Op:max_pool2d, Name=max_pool2d0
Inputs:
	arg[0]=tanh1(0)
Attrs:
	pool_size=(2, 2)
	strides=(2, 2)
Variable:conv2_weight
--------------------
Op:conv2d, Name=conv2
Inputs:
	arg[0]=max_pool2d0(0)
	arg[1]=conv2_weight(0) version=0
Attrs:
	channels=50
	kernel_size=(5, 5)
	padding=(1, 1)
	strides=(1, 1)
	use_bias=False
--------------------
Op:tanh, Name=tanh2
Inputs:
	arg[0]=conv2(0)
--------------------
Op:max_pool2d, Name=max_pool2d1
Inputs:
	arg[0]=tanh2(0)
Attrs:
	pool_size=(2, 2)
	strides=(2, 2)
--------------------
Op:flatten, Name=flatten0
Inputs:
	arg[0]=max_pool2d1(0)
Variable:fc2_weight
Variable:fc2_bias
--------------------
Op:dense, Name=fc2
Inputs:
	arg[0]=flatten0(0)
	arg[1]=fc2_weight(0) version=0
	arg[2]=fc2_bias(0) version=0
Attrs:
	units=10
--------------------
Op:softmax, Name=softmax
Inputs:
	arg[0]=fc2(0)

extern "C" __global__ void fuse_conv2d_kernel0( float* __restrict__ input0,  float* __restrict__ input1,  float* __restrict__ compute) {
   float compute_local[2];
  __shared__ float pad_temp_shared[180];
  __shared__ float input1_shared[500];
  for (int yy_c_init = 0; yy_c_init < 2; ++yy_c_init) {
    compute_local[yy_c_init] = 0.000000e+00f;
  }
  if ((((int)threadIdx.z) * 9) < ((180 - ((int)threadIdx.y)) - ((int)threadIdx.x))) {
    pad_temp_shared[(((((((((int)threadIdx.z) * 9) + ((int)threadIdx.y)) + ((int)threadIdx.x)) / 180) * 180) + ((((((int)threadIdx.z) * 3) + ((int)threadIdx.y)) + ((int)threadIdx.x)) % 6)) + ((((((((int)threadIdx.z) * 9) + ((int)threadIdx.y)) + ((int)threadIdx.x)) / 6) % 30) * 6))] = (((((1 <= (((((((int)threadIdx.z) * 9) + ((int)threadIdx.y)) + ((int)threadIdx.x)) / 6) % 30)) && ((((((((int)threadIdx.z) * 9) + ((int)threadIdx.y)) + ((int)threadIdx.x)) / 6) % 30) < 29)) && ((1 - ((((((int)threadIdx.z) * 3) + ((int)threadIdx.y)) + ((int)threadIdx.x)) % 6)) <= (((int)blockIdx.x) * 2))) && ((((int)blockIdx.x) * 2) < (29 - ((((((int)threadIdx.z) * 3) + ((int)threadIdx.y)) + ((int)threadIdx.x)) % 6)))) ? input0[(((((((int)blockIdx.x) * 2) + (((((((int)threadIdx.z) * 9) + ((int)threadIdx.y)) + ((int)threadIdx.x)) / 180) * 784)) + ((((((int)threadIdx.z) * 3) + ((int)threadIdx.y)) + ((int)threadIdx.x)) % 6)) + ((((((((int)threadIdx.z) * 9) + ((int)threadIdx.y)) + ((int)threadIdx.x)) / 6) % 30) * 28)) - 29)] : 0.000000e+00f);
  }
  if (((int)threadIdx.z) < (20 - (((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) / 25))) {
    input1_shared[((((((int)threadIdx.z) * 25) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) / 25) * 25)) + (((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) % 5)) + (((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) / 5) % 5) * 5))] = input1[((((((int)threadIdx.z) * 25) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) / 25) * 25)) + (((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) % 5)) + (((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) / 5) % 5) * 5))];
  }
  __syncthreads();
  for (int ry_inner = 0; ry_inner < 5; ++ry_inner) {
    for (int rx_inner = 0; rx_inner < 5; ++rx_inner) {
      for (int yy_c = 0; yy_c < 2; ++yy_c) {
        compute_local[yy_c] = (compute_local[yy_c] + (pad_temp_shared[(((((((int)threadIdx.y) * 12) + ((int)threadIdx.x)) + (ry_inner * 6)) + rx_inner) + (yy_c * 6))] * input1_shared[(((((int)threadIdx.z) * 25) + (ry_inner * 5)) + rx_inner)]));
      }
    }
  }
  for (int yy_inner_inner_inner = 0; yy_inner_inner_inner < 2; ++yy_inner_inner_inner) {
    compute[(((((((int)blockIdx.x) * 2) + (((int)threadIdx.z) * 676)) + (((int)threadIdx.y) * 52)) + ((int)threadIdx.x)) + (yy_inner_inner_inner * 26))] = compute_local[yy_inner_inner_inner];
  }
}

extern "C" __global__ void fuse_tanh_kernel0( float* __restrict__ tensor,  float* __restrict__ input0) {
  if ((((int)blockIdx.x) * 512) < (13520 - ((int)threadIdx.x))) {
    tensor[((((int)blockIdx.x) * 512) + ((int)threadIdx.x))] = tanhf(input0[((((int)blockIdx.x) * 512) + ((int)threadIdx.x))]);
  }
}

extern "C" __global__ void fuse_max_pool2d_kernel0( float* __restrict__ input0,  float* __restrict__ tensor) {
   float tensor_local[1];
  tensor_local[0] = -3.402823e+38f;
  for (int rv = 0; rv < 2; ++rv) {
    for (int rv1 = 0; rv1 < 2; ++rv1) {
      if ((((int)blockIdx.x) * 512) < (3380 - ((int)threadIdx.x))) {
        tensor_local[0] = max(tensor_local[0], input0[(((((((((((int)blockIdx.x) * 512) + ((int)threadIdx.x)) / 3380) * 13520) + ((((((int)blockIdx.x) * 5) + ((int)threadIdx.x)) % 13) * 2)) + (((((((int)blockIdx.x) * 512) + ((int)threadIdx.x)) / 13) % 13) * 52)) + (((((((int)blockIdx.x) * 512) + ((int)threadIdx.x)) / 169) % 20) * 676)) + (rv * 26)) + rv1)]);
      }
    }
  }
  if ((((int)blockIdx.x) * 512) < (3380 - ((int)threadIdx.x))) {
    tensor[(((((((((int)blockIdx.x) * 512) + ((int)threadIdx.x)) / 3380) * 3380) + (((((int)blockIdx.x) * 5) + ((int)threadIdx.x)) % 13)) + (((((((int)blockIdx.x) * 512) + ((int)threadIdx.x)) / 13) % 13) * 13)) + (((((((int)blockIdx.x) * 512) + ((int)threadIdx.x)) / 169) % 20) * 169))] = tensor_local[0];
  }
}

extern "C" __global__ void fuse_conv2d_1_kernel0( float* __restrict__ input0,  float* __restrict__ input1,  float* __restrict__ compute) {
   float compute_local[1];
  __shared__ float pad_temp_shared[150];
  __shared__ float input1_shared[500];
  compute_local[0] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 10; ++rc_outer) {
    __syncthreads();
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner < 2; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) {
      if ((((int)threadIdx.z) * 3) < (30 - (((((int)threadIdx.y) * 2) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 5))) {
        pad_temp_shared[(((((((((int)threadIdx.z) * 3) + (((((int)threadIdx.y) * 2) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 5)) / 30) * 150) + ((((((int)threadIdx.z) * 3) + (((((int)threadIdx.y) * 2) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 5)) % 15) * 5)) + (((((int)threadIdx.y) * 2) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 5)) + (((((((int)threadIdx.z) * 3) + (((((int)threadIdx.y) * 2) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 5)) / 15) % 2) * 75))] = (((((1 <= (((((int)threadIdx.z) * 3) + (((((int)threadIdx.y) * 2) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 5)) % 15)) && ((((((int)threadIdx.z) * 3) + (((((int)threadIdx.y) * 2) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 5)) % 15) < 14)) && ((1 - (((((int)threadIdx.y) * 2) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 5)) <= ((int)blockIdx.x))) && (((int)blockIdx.x) < (14 - (((((int)threadIdx.y) * 2) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 5)))) ? input0[((((((((int)blockIdx.x) + (rc_outer * 338)) + ((((((int)threadIdx.z) * 3) + (((((int)threadIdx.y) * 2) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 5)) / 30) * 3380)) + ((((((int)threadIdx.z) * 3) + (((((int)threadIdx.y) * 2) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 5)) % 15) * 13)) + (((((int)threadIdx.y) * 2) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 5)) + (((((((int)threadIdx.z) * 3) + (((((int)threadIdx.y) * 2) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 5)) / 15) % 2) * 169)) - 14)] : 0.000000e+00f);
      }
    }
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 < 5; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) {
      if (((int)threadIdx.z) < (10 - (((int)threadIdx.y) / 10))) {
        if ((((int)blockIdx.z) * 10) < ((50 - ((int)threadIdx.z)) - (((int)threadIdx.y) / 10))) {
          input1_shared[(((((((int)threadIdx.z) * 50) + ((((int)threadIdx.y) / 10) * 50)) + ((((int)threadIdx.y) % 5) * 5)) + (((((int)threadIdx.y) / 5) % 2) * 25)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1)] = input1[(((((((((int)blockIdx.z) * 5000) + (rc_outer * 50)) + (((int)threadIdx.z) * 500)) + ((((int)threadIdx.y) / 10) * 500)) + ((((int)threadIdx.y) % 5) * 5)) + (((((int)threadIdx.y) / 5) % 2) * 25)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1)];
        }
      }
    }
    __syncthreads();
    for (int rc_inner = 0; rc_inner < 2; ++rc_inner) {
      for (int ry_inner = 0; ry_inner < 5; ++ry_inner) {
        for (int rx_inner = 0; rx_inner < 5; ++rx_inner) {
          compute_local[0] = (compute_local[0] + (pad_temp_shared[((((((int)threadIdx.y) * 5) + (rc_inner * 75)) + (ry_inner * 5)) + rx_inner)] * input1_shared[((((((int)threadIdx.z) * 50) + (rc_inner * 25)) + (ry_inner * 5)) + rx_inner)]));
        }
      }
    }
  }
  compute[((((((int)blockIdx.z) * 1210) + ((int)blockIdx.x)) + (((int)threadIdx.z) * 121)) + (((int)threadIdx.y) * 11))] = compute_local[0];
}

extern "C" __global__ void fuse_tanh_1_kernel0( float* __restrict__ tensor,  float* __restrict__ input0) {
  if ((((int)blockIdx.x) * 512) < (6050 - ((int)threadIdx.x))) {
    tensor[((((int)blockIdx.x) * 512) + ((int)threadIdx.x))] = tanhf(input0[((((int)blockIdx.x) * 512) + ((int)threadIdx.x))]);
  }
}

extern "C" __global__ void fuse_max_pool2d_1_kernel0( float* __restrict__ input0,  float* __restrict__ tensor) {
   float tensor_local[1];
  tensor_local[0] = -3.402823e+38f;
  for (int rv = 0; rv < 2; ++rv) {
    for (int rv1 = 0; rv1 < 2; ++rv1) {
      if ((((int)blockIdx.x) * 512) < (1250 - ((int)threadIdx.x))) {
        tensor_local[0] = max(tensor_local[0], input0[(((((((((((int)blockIdx.x) * 512) + ((int)threadIdx.x)) / 1250) * 6050) + ((((((int)blockIdx.x) * 2) + ((int)threadIdx.x)) % 5) * 2)) + (((((((int)blockIdx.x) * 512) + ((int)threadIdx.x)) / 5) % 5) * 22)) + (((((((int)blockIdx.x) * 512) + ((int)threadIdx.x)) / 25) % 50) * 121)) + (rv * 11)) + rv1)]);
      }
    }
  }
  if ((((int)blockIdx.x) * 512) < (1250 - ((int)threadIdx.x))) {
    tensor[(((((((((int)blockIdx.x) * 512) + ((int)threadIdx.x)) / 1250) * 1250) + (((((int)blockIdx.x) * 2) + ((int)threadIdx.x)) % 5)) + (((((((int)blockIdx.x) * 512) + ((int)threadIdx.x)) / 5) % 5) * 5)) + (((((((int)blockIdx.x) * 512) + ((int)threadIdx.x)) / 25) % 50) * 25))] = tensor_local[0];
  }
}

extern "C" __global__ void fuse_flatten_kernel0( float* __restrict__ tensor,  float* __restrict__ input0) {
  if ((((int)blockIdx.x) * 512) < (1250 - ((int)threadIdx.x))) {
    tensor[((((int)blockIdx.x) * 512) + ((int)threadIdx.x))] = input0[(((((((((int)blockIdx.x) * 512) + ((int)threadIdx.x)) / 1250) * 1250) + (((((((int)blockIdx.x) * 512) + ((int)threadIdx.x)) % 1250) / 25) * 25)) + ((((((((int)blockIdx.x) * 512) + ((int)threadIdx.x)) % 1250) / 5) % 5) * 5)) + ((((((int)blockIdx.x) * 512) + ((int)threadIdx.x)) % 1250) % 5))];
  }
}

extern "C" __global__ void fuse_dense_kernel0( float* __restrict__ input0,  float* __restrict__ input1,  float* __restrict__ compute,  float* __restrict__ input2) {
   float compute_rf[1];
  __shared__ float red_buf0[64];
  __shared__ float compute1[1];
  compute_rf[0] = 0.000000e+00f;
  for (int k_outer = 0; k_outer < 20; ++k_outer) {
    if (((int)threadIdx.x) < (1250 - (k_outer * 64))) {
      compute_rf[0] = (compute_rf[0] + (input0[(((int)threadIdx.x) + (k_outer * 64))] * input1[(((((int)blockIdx.x) * 1250) + ((int)threadIdx.x)) + (k_outer * 64))]));
    }
  }
  ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = compute_rf[0];
  __syncthreads();
  if (((int)threadIdx.x) < 32) {
    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(32 + ((int)threadIdx.x))]);
  }
  __syncthreads();
  if (((int)threadIdx.x) < 16) {
    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(16 + ((int)threadIdx.x))]);
    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(8 + ((int)threadIdx.x))]);
    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(4 + ((int)threadIdx.x))]);
    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(2 + ((int)threadIdx.x))]);
    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(1 + ((int)threadIdx.x))]);
  }
  __syncthreads();
  if (((int)threadIdx.x) == 0) {
    compute1[0] = ((volatile __shared__ float*)red_buf0)[0];
  }
  if (((int)threadIdx.x) == 0) {
    compute[((int)blockIdx.x)] = (compute1[0] + input2[((int)blockIdx.x)]);
  }
}

extern "C" __global__ void fuse_softmax_kernel0( float* __restrict__ tensor,  float* __restrict__ input0) {
  tensor[0] = -3.402823e+38f;
  for (int k1 = 0; k1 < 10; ++k1) {
    tensor[0] = max(tensor[0], input0[k1]);
  }
}

extern "C" __global__ void fuse_softmax_kernel1( float* __restrict__ input0,  float* __restrict__ tensor,  float* __restrict__ tensor1) {
   float tensor_rf[1];
  __shared__ float red_buf0[64];
  tensor_rf[0] = 0.000000e+00f;
  if (((int)threadIdx.x) < 10) {
    tensor_rf[0] = (tensor_rf[0] + __expf((input0[((int)threadIdx.x)] - tensor[0])));
  }
  ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = tensor_rf[0];
  __syncthreads();
  if (((int)threadIdx.x) < 32) {
    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(32 + ((int)threadIdx.x))]);
  }
  __syncthreads();
  if (((int)threadIdx.x) < 16) {
    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(16 + ((int)threadIdx.x))]);
    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(8 + ((int)threadIdx.x))]);
    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(4 + ((int)threadIdx.x))]);
    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(2 + ((int)threadIdx.x))]);
    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(1 + ((int)threadIdx.x))]);
  }
  __syncthreads();
  if (((int)threadIdx.x) == 0) {
    tensor1[0] = ((volatile __shared__ float*)red_buf0)[0];
  }
}

extern "C" __global__ void fuse_softmax_kernel2( float* __restrict__ tensor,  float* __restrict__ input0,  float* __restrict__ tensor1,  float* __restrict__ tensor2) {
  if (((int)threadIdx.x) < 10) {
    tensor[((int)threadIdx.x)] = (__expf((input0[((int)threadIdx.x)] - tensor1[0])) / tensor2[0]);
  }
}


Graph(%data,
      %conv1_weight,
      %conv2_weight,
      %fc2_weight,
      %fc2_bias) {
  %2 = tvm_op(%data, %conv1_weight, num_outputs='1', num_inputs='2', func_name='fuse_conv2d', flatten_data='0')
  %3 = tvm_op(%2, num_outputs='1', num_inputs='1', func_name='fuse_tanh', flatten_data='1')
  %4 = tvm_op(%3, num_outputs='1', num_inputs='1', func_name='fuse_max_pool2d', flatten_data='0')
  %6 = tvm_op(%4, %conv2_weight, num_outputs='1', num_inputs='2', func_name='fuse_conv2d_1', flatten_data='0')
  %7 = tvm_op(%6, num_outputs='1', num_inputs='1', func_name='fuse_tanh_1', flatten_data='1')
  %8 = tvm_op(%7, num_outputs='1', num_inputs='1', func_name='fuse_max_pool2d_1', flatten_data='0')
  %9 = tvm_op(%8, num_outputs='1', num_inputs='1', func_name='fuse_flatten', flatten_data='0')
  %12 = tvm_op(%9, %fc2_weight, %fc2_bias, num_outputs='1', num_inputs='3', func_name='fuse_dense', flatten_data='0')
  %13 = tvm_op(%12, num_outputs='1', num_inputs='1', func_name='fuse_softmax', flatten_data='0')
  ret %13
}
graph_attr_keys = [storage_id, dltype, dtype, shape]

{'conv1_weight': <tvm.NDArray shape=(20, 1, 5, 5), cpu(0)>
array([[[[ 0.01043677,  0.04600942,  0.02197173,  0.00959643,
          -0.01632329],
         [ 0.03119347, -0.01334442,  0.08376459,  0.09913526,
          -0.02492125],
         [ 0.06237344,  0.00617799,  0.01454854,  0.09099639,
          -0.09171635],
         [-0.08827547, -0.10258162,  0.07111712,  0.05947242,
           0.07911193],
         [ 0.1023329 ,  0.06396279, -0.00823606,  0.05997966,
          -0.08161636]]],


       [[[ 0.02991637, -0.07625427,  0.09507421,  0.00467137,
          -0.01824605],
         [-0.05034013,  0.05863363, -0.00937545,  0.01463179,
          -0.10288707],
         [ 0.02515153,  0.02396707,  0.02500154,  0.09487733,
           0.03887482],
         [-0.03003847, -0.01346313,  0.04225533, -0.09402775,
           0.03565622],
         [ 0.03648391, -0.06192281, -0.07933889, -0.03946308,
          -0.02913986]]],


       [[[ 0.0150087 , -0.01312755,  0.10441872, -0.0850864 ,
          -0.06224477],
         [-0.07241507,  0.03273594, -0.05274848, -0.00720306,
          -0.05464411],
         [-0.07291537, -0.0833053 ,  0.03342467, -0.07735974,
          -0.06487342],
         [-0.02806774,  0.06863124, -0.08614337,  0.07225566,
          -0.08635779],
         [ 0.10187132, -0.00670265,  0.10193581,  0.02241692,
           0.0511567 ]]],


       [[[-0.09852579, -0.04643783, -0.08120539, -0.04358706,
          -0.08151944],
         [-0.03891683, -0.01833134, -0.09318919,  0.04115227,
           0.01423999],
         [-0.05016184,  0.00497064, -0.08681917,  0.01623804,
           0.09178739],
         [-0.03879159,  0.03579384, -0.07872493,  0.0462527 ,
          -0.04502687],
         [-0.06773654,  0.01849724, -0.10260532,  0.07033034,
          -0.10590056]]],


       [[[ 0.03801877, -0.04917436,  0.0502866 ,  0.09882007,
          -0.05371884],
         [ 0.01628312,  0.01967939,  0.01544811, -0.05920764,
           0.09680181],
         [-0.01130507,  0.07406529,  0.04265046, -0.0433098 ,
           0.0670928 ],
         [-0.022128  ,  0.08148329,  0.01737687,  0.08161845,
           0.04116499],
         [ 0.04816139,  0.00028316,  0.09751479,  0.0307864 ,
          -0.01628048]]],


       [[[ 0.02274783, -0.10280082, -0.04242509,  0.03424654,
          -0.0448833 ],
         [ 0.02523276, -0.01522989, -0.07793892, -0.04312905,
           0.01495913],
         [ 0.01942941,  0.01589141,  0.03275571,  0.03252105,
          -0.01466336],
         [ 0.08478523, -0.02831646, -0.01371266,  0.08379674,
           0.06546703],
         [ 0.04359321, -0.08547509,  0.08968916,  0.04580672,
           0.10665797]]],


       [[[-0.0749511 ,  0.07870866, -0.07216205,  0.02470767,
          -0.08043067],
         [ 0.07440729,  0.06570756,  0.01477436, -0.01984505,
          -0.09211597],
         [ 0.04221205, -0.00993299,  0.04747748,  0.07833584,
           0.10167077],
         [ 0.07607395, -0.10439992, -0.02993795,  0.04917405,
          -0.07020853],
         [ 0.00449782, -0.09528655, -0.06414344, -0.10294437,
           0.06279521]]],


       [[[-0.05902738, -0.0330652 ,  0.09152763,  0.04370564,
          -0.10009705],
         [-0.0716914 ,  0.02597317,  0.01651217, -0.05604087,
           0.09283886],
         [ 0.02436695,  0.00761861,  0.01922356,  0.04920216,
          -0.04020785],
         [-0.02176125, -0.06203802, -0.06709476,  0.09501082,
           0.05121811],
         [-0.00203999, -0.05828121, -0.05252079, -0.09449734,
          -0.01402231]]],


       [[[-0.04023973,  0.04198   , -0.02613776, -0.06850362,
          -0.10162796],
         [-0.09252592,  0.03835579, -0.00990003,  0.00782096,
           0.08481189],
         [ 0.10483888, -0.06052997,  0.03486758, -0.0506038 ,
          -0.10248913],
         [ 0.05524368, -0.03848195, -0.02491647,  0.01888299,
           0.07078113],
         [ 0.02757748,  0.07967606, -0.04841875,  0.06372509,
          -0.06721386]]],


       [[[ 0.09681093,  0.04008668, -0.06082702,  0.09565186,
           0.04935905],
         [-0.05260949, -0.06129648,  0.00389148, -0.10141758,
          -0.06254553],
         [-0.01610292, -0.02690359, -0.0077879 , -0.04754498,
           0.01855527],
         [ 0.0777956 , -0.08177513,  0.00371581, -0.07866715,
           0.04636655],
         [-0.02222337,  0.01398767, -0.06771762, -0.07593475,
          -0.00255367]]],


       [[[-0.03087129,  0.09416831,  0.05672893,  0.05316652,
           0.08631891],
         [-0.08906803,  0.01115922,  0.01806174,  0.09876616,
          -0.04444073],
         [-0.05541314, -0.08546075, -0.10339169,  0.09183723,
           0.03632969],
         [ 0.06096826, -0.04666807,  0.01847527, -0.09323028,
          -0.00307295],
         [ 0.10209276,  0.08050021, -0.03460307,  0.09868785,
          -0.05736461]]],


       [[[ 0.0960684 ,  0.09437052,  0.0639722 ,  0.02789094,
           0.08002613],
         [-0.04425412,  0.07460727,  0.0252031 , -0.10407434,
          -0.03266285],
         [-0.07523065,  0.10301945, -0.00462462, -0.00055775,
           0.02982048],
         [-0.02809779, -0.07763398,  0.06887167, -0.0663133 ,
           0.0024201 ],
         [-0.0589435 , -0.08598447,  0.07743981,  0.10111444,
           0.0985306 ]]],


       [[[ 0.08692522,  0.05859378, -0.03567507, -0.08956429,
          -0.01983267],
         [-0.05725075, -0.07857745, -0.09548128,  0.04823411,
          -0.1044612 ],
         [ 0.0578526 , -0.07548598, -0.08990196, -0.08774656,
           0.03678537],
         [-0.05444278, -0.01698938,  0.01226596,  0.07708909,
           0.04854411],
         [-0.04910596, -0.07879229, -0.09506497, -0.04242   ,
          -0.05086128]]],


       [[[-0.00937754,  0.0391872 ,  0.04182648, -0.04628562,
          -0.0256727 ],
         [-0.06817279,  0.06169363, -0.09474987,  0.04211978,
           0.05958758],
         [ 0.05931223, -0.05143762, -0.02697989,  0.01872959,
          -0.04857272],
         [-0.02761283, -0.06477252, -0.00858317, -0.09736598,
           0.06409906],
         [-0.09045052,  0.00402712, -0.04130574,  0.01657938,
           0.09823098]]],


       [[[ 0.03112423, -0.09934369, -0.01488058,  0.00214169,
           0.00773507],
         [ 0.03878335, -0.04755196, -0.07935295, -0.02294691,
           0.09758365],
         [-0.06689423,  0.0863754 ,  0.00936611, -0.00921273,
           0.08168389],
         [-0.00885085,  0.04792906, -0.02158929,  0.08638833,
           0.04062906],
         [ 0.04268099, -0.03683493,  0.05490158,  0.02909108,
          -0.055586  ]]],


       [[[-0.07257985,  0.06337116,  0.09817395, -0.00895029,
           0.01945323],
         [ 0.07648432, -0.00914601,  0.09661483,  0.01619628,
           0.06858289],
         [ 0.08741447,  0.06746183, -0.07282025,  0.02755965,
          -0.02171567],
         [-0.09349591, -0.01624259, -0.05159552,  0.07462753,
          -0.09978367],
         [ 0.09813464, -0.03092344, -0.03063736, -0.10341331,
          -0.06730016]]],


       [[[-0.02111161,  0.09178636, -0.08560593,  0.09520947,
           0.07899997],
         [-0.00980049, -0.03705291, -0.05714171,  0.02447358,
          -0.09983286],
         [-0.10356778, -0.01522411, -0.09234965, -0.05303725,
          -0.05961831],
         [-0.05276994, -0.07888371, -0.10433105, -0.08221292,
           0.02533215],
         [ 0.10140024,  0.10484017, -0.01944505, -0.07206337,
           0.02966851]]],


       [[[-0.0020728 ,  0.10464021, -0.09294187,  0.06055807,
          -0.04524231],
         [-0.05528703,  0.03474494, -0.05429398,  0.03546217,
           0.00370072],
         [-0.01623046,  0.01169275, -0.0455303 ,  0.04416753,
          -0.01820437],
         [-0.02981661,  0.0702698 ,  0.09086175, -0.09706772,
          -0.05716676],
         [-0.03238792,  0.06734267,  0.10380244,  0.10027037,
           0.0865816 ]]],


       [[[-0.0434981 ,  0.10519643, -0.05357625, -0.08426081,
           0.09641773],
         [-0.05699715,  0.04057416, -0.09442738,  0.04932768,
           0.08161522],
         [-0.04865504, -0.02585872, -0.02687661,  0.05319317,
          -0.05605917],
         [-0.07016076, -0.0108419 , -0.04180641,  0.07252169,
          -0.05607316],
         [ 0.00051089,  0.09462836,  0.02864991,  0.07852978,
           0.09412079]]],


       [[[ 0.05361578,  0.04267094,  0.10005525,  0.10570733,
          -0.01030096],
         [-0.0917519 , -0.0443025 , -0.07432969, -0.01764216,
          -0.07883365],
         [ 0.02226132, -0.02505669,  0.08453706,  0.10001871,
           0.01002441],
         [-0.04814475,  0.01971969,  0.0848311 , -0.01994125,
           0.0111348 ],
         [-0.04882269, -0.00952644, -0.02101453, -0.05379146,
           0.00125429]]]], dtype=float32), 'conv2_weight': <tvm.NDArray shape=(50, 20, 5, 5), cpu(0)>
array([[[[-2.22059246e-02, -1.48686338e-02,  2.92423880e-03,
           2.93466840e-02, -1.94976088e-02],
         [ 4.96723875e-02,  4.24304046e-02, -5.28519824e-02,
          -2.88504343e-02, -6.30796282e-03],
         [-4.63012420e-02, -1.77446753e-02,  2.81173438e-02,
           2.11396907e-02,  1.43321967e-02],
         [ 2.46545617e-02, -3.45558003e-02, -1.85384192e-02,
           2.06394065e-02,  4.44114283e-02],
         [ 5.11504989e-03, -2.54476108e-02, -5.50132133e-02,
           2.46321280e-02, -5.76307140e-02]],

        [[-1.49103003e-02,  3.57615249e-03,  4.94326316e-02,
          -4.80734780e-02, -1.10149076e-02],
         [-5.57067357e-02, -1.84315145e-02,  1.43142361e-02,
          -2.58729123e-02, -3.39906067e-02],
         [-4.50042300e-02,  9.03374050e-03,  2.28676815e-02,
           2.01375578e-02,  5.25652207e-02],
         [-5.82374372e-02,  1.72379073e-02,  1.17567349e-02,
           1.03921192e-02,  5.41941114e-02],
         [-5.65781966e-02,  2.30096653e-02,  3.67342830e-02,
           1.14850129e-03, -1.94440428e-02]],

        [[ 3.40597108e-02, -4.71660793e-02, -6.78809127e-03,
           2.33658287e-03,  2.27138493e-02],
         [-4.79105562e-02, -3.18815410e-02, -1.05044050e-02,
           1.44387940e-02,  4.53162082e-02],
         [ 1.39154959e-02, -4.29245979e-02,  5.62797822e-02,
           4.35390882e-02,  3.18622915e-04],
         [ 4.94603328e-02,  4.84602246e-03,  4.95725311e-02,
           3.86336222e-02,  5.48400879e-02],
         [ 4.91599292e-02, -5.43341562e-02, -3.80868018e-02,
          -1.29832169e-02,  5.29495291e-02]],

        ...,

        [[ 3.82781103e-02,  2.64164675e-02, -5.40386438e-02,
           3.19833755e-02, -3.31567600e-02],
         [ 4.72120531e-02, -5.35272397e-02, -1.95486024e-02,
          -4.68744785e-02, -2.85870978e-03],
         [ 3.74771915e-02, -2.36338768e-02, -4.08783183e-02,
          -1.98770892e-02,  3.67578790e-02],
         [-4.21139188e-02, -3.19280401e-02, -5.04908897e-02,
           2.40902938e-02, -1.22690266e-02],
         [-2.21521538e-02,  2.56029014e-02, -1.92083437e-02,
           2.66738404e-02,  3.69123742e-02]],

        [[-3.30639407e-02,  5.54879643e-02, -3.95405889e-02,
          -2.44942047e-02, -3.74985375e-02],
         [-1.80925243e-02, -2.33502965e-03,  2.59697181e-03,
           4.14100997e-02,  4.56074700e-02],
         [-3.27780806e-02,  1.43918758e-02, -4.54969220e-02,
          -4.80495812e-03, -2.08061654e-02],
         [-2.14892328e-02, -2.03952473e-03,  2.69146562e-02,
          -5.04521616e-02,  4.44042347e-02],
         [ 2.74985731e-02, -3.78845111e-02,  5.14292605e-02,
           7.39211973e-04,  5.85315861e-02]],

        [[-3.54533419e-02,  4.08802973e-03, -2.45636348e-02,
          -2.29328442e-02,  1.06644854e-02],
         [ 4.93866801e-02,  3.57488431e-02,  2.62253322e-02,
           6.92972401e-03,  4.94545363e-02],
         [-8.94540455e-04,  4.37787436e-02,  3.91119234e-02,
          -3.35121714e-02,  3.17626745e-02],
         [-5.71286641e-02, -2.07480807e-02, -3.16698179e-02,
           8.03707400e-04,  2.77374014e-02],
         [-4.71153185e-02,  1.74750935e-03,  5.13415597e-02,
          -3.17776613e-02,  2.07446460e-02]]],


       [[[ 1.08770235e-02, -5.73754646e-02, -2.83094612e-03,
           2.44486853e-02, -5.34041300e-02],
         [ 4.44450043e-02,  2.35169474e-03, -5.49633503e-02,
          -3.22733745e-02,  5.31290583e-02],
         [ 9.64029972e-03, -4.59681042e-02, -2.48802397e-02,
          -5.07035200e-03, -5.61005846e-02],
         [-1.03505310e-02, -1.23447820e-03, -3.00173741e-02,
           1.03803370e-02,  2.96564456e-02],
         [-3.09359282e-02,  1.41115030e-02,  1.63508821e-02,
           5.25276624e-02,  3.25883664e-02]],

        [[ 4.07940224e-02, -1.12190540e-03, -3.68481986e-02,
           5.80639429e-02, -4.34054099e-02],
         [-3.34257656e-03, -5.05797565e-02,  5.19784912e-02,
           5.44464327e-02,  2.56922171e-02],
         [-1.75670385e-02, -2.87637878e-02, -2.74848603e-02,
          -4.36468534e-02,  3.02243512e-03],
         [-4.19460647e-02, -2.14623064e-02,  1.48383435e-02,
           2.66471785e-02, -5.57114780e-02],
         [-8.18397757e-03,  1.78150088e-02,  4.13679332e-02,
          -2.88966554e-03,  5.49477637e-02]],

        [[-2.74463054e-02, -5.69720268e-02, -1.90266967e-03,
          -2.85610277e-02,  3.79099324e-02],
         [-3.12944613e-02, -2.21768357e-02,  3.41050662e-02,
           2.51949970e-02,  6.79826457e-03],
         [ 2.40010601e-02, -9.52827465e-03, -5.79321571e-02,
          -5.72242290e-02,  1.31416123e-03],
         [-4.87999618e-02, -5.25726564e-02,  5.45157269e-02,
           4.20420840e-02, -4.07503992e-02],
         [-5.84762208e-02,  5.17228357e-02, -2.59598829e-02,
          -3.67839076e-02,  2.24271324e-02]],

        ...,

        [[-2.86839921e-02,  2.93398481e-02,  5.83224557e-02,
           3.97908688e-03,  5.20196967e-02],
         [-1.21077839e-02, -4.60606366e-02, -1.06833149e-02,
          -2.38750707e-02, -7.72097497e-04],
         [ 1.83910728e-02, -4.56133112e-03,  5.09607829e-02,
           4.50590439e-02,  2.36531943e-02],
         [-1.20797940e-03, -4.31323685e-02, -1.20605240e-02,
           2.39370577e-02, -2.51916274e-02],
         [-4.63761687e-02,  4.77681756e-02,  2.44815238e-02,
           1.34997927e-02,  3.42539661e-02]],

        [[ 3.93068381e-02, -1.93708378e-03,  4.46401983e-02,
           4.87660021e-02, -2.67531965e-02],
         [ 1.25944233e-02,  3.11320275e-03,  4.44375444e-03,
           5.12538552e-02, -2.28139628e-02],
         [ 5.66139892e-02,  4.70927842e-02, -4.83388035e-03,
           3.71763185e-02,  3.15075591e-02],
         [ 2.08329260e-02, -2.10988950e-02, -3.55480202e-02,
           2.00872663e-02,  4.01649214e-02],
         [-5.66506721e-02,  1.67234186e-02, -6.69002626e-03,
           4.66192625e-02, -2.09069494e-02]],

        [[-3.02316528e-03,  1.72934611e-03, -4.21074107e-02,
           2.49313936e-02,  3.87014262e-02],
         [-5.17723635e-02, -2.44300403e-02, -5.40986657e-02,
           5.34649715e-02,  1.95768084e-02],
         [ 5.43615855e-02,  3.68823227e-03,  3.53746451e-02,
          -1.47071285e-02, -1.71189625e-02],
         [-1.42558133e-02,  1.84869207e-02, -1.64591614e-02,
           4.68862355e-02,  5.65953553e-02],
         [-5.49908169e-02, -3.58791649e-02, -4.54086326e-02,
          -5.35928346e-02, -3.18837091e-02]]],


       [[[-6.23092847e-03,  3.94642688e-02, -3.25766355e-02,
          -7.09059066e-04,  5.03117964e-02],
         [ 1.95821822e-02,  3.49074416e-02,  5.97180240e-03,
           5.62664717e-02,  1.03830481e-02],
         [-5.32243364e-02, -3.53686325e-02, -1.11517711e-02,
           1.18603678e-02,  3.18452828e-02],
         [-1.01783108e-02,  2.45995093e-02,  3.39460410e-02,
          -2.14002952e-02,  5.61263822e-02],
         [ 1.75259747e-02,  4.46179248e-02,  6.55075116e-03,
           2.82936580e-02,  3.16828750e-02]],

        [[ 4.78091538e-02, -4.09468450e-02,  6.82545593e-03,
          -8.38745013e-03,  4.95553091e-02],
         [-4.62465733e-02,  5.65132685e-02,  4.39683571e-02,
          -4.99083549e-02, -1.05790864e-03],
         [ 2.54779607e-02,  2.78894529e-02,  4.76037189e-02,
           3.51166427e-02, -2.21415665e-02],
         [-1.83299111e-04,  2.36307289e-02, -4.23419401e-02,
          -3.58361267e-02, -2.22008117e-03],
         [-2.36270335e-02,  4.24585901e-02,  1.01037649e-02,
          -1.77225173e-02,  4.08511423e-02]],

        [[ 3.57037075e-02,  5.83613478e-02,  4.06725109e-02,
          -1.00178253e-02, -4.36228625e-02],
         [ 3.98917794e-02, -5.15558720e-02, -1.75344404e-02,
           4.91546802e-02,  5.39594442e-02],
         [ 1.64612401e-02,  2.20922288e-02, -5.35822436e-02,
           1.69576390e-03,  5.48863923e-03],
         [-1.87254827e-02, -5.05207665e-02, -3.17470916e-02,
          -1.66312177e-02, -7.59539288e-03],
         [ 1.06482478e-02,  2.60438286e-02, -2.13567689e-02,
          -2.00308841e-02, -5.62479571e-02]],

        ...,

        [[ 4.34944034e-03, -4.77275811e-02,  4.01588082e-02,
           5.65869100e-02, -6.01927424e-03],
         [-5.35781309e-02, -4.47884351e-02, -1.38592944e-02,
           4.51477878e-02, -4.12174910e-02],
         [ 3.79418358e-02, -5.68001643e-02, -4.99012461e-03,
           1.69100612e-02, -5.14830835e-02],
         [ 1.34396376e-02,  5.20432815e-02, -3.97862829e-02,
           2.68893316e-02,  1.27757695e-02],
         [-3.68753932e-02, -5.78275360e-02, -5.74667193e-02,
           3.75827821e-03,  5.18530160e-02]],

        [[ 1.68985240e-02,  2.50962283e-02, -7.18400639e-04,
           9.58985090e-03, -4.37553562e-02],
         [ 4.41287123e-02,  3.05409059e-02,  5.83430864e-02,
          -2.36882623e-02, -3.19684036e-02],
         [-4.38965708e-02,  5.43626808e-02,  3.28939036e-02,
          -3.90760601e-02,  6.17000787e-03],
         [-1.00984331e-02, -4.08137813e-02, -3.95739600e-02,
           5.42760491e-02, -2.28402559e-02],
         [ 5.16960770e-02, -4.96993884e-02, -4.59027756e-03,
          -4.33745757e-02, -5.79933636e-02]],

        [[ 6.29643770e-03, -4.52160910e-02,  2.60008499e-02,
           2.32010148e-02, -3.79040092e-02],
         [ 5.17315418e-02,  2.58859526e-02, -2.36593001e-02,
           2.45029498e-02,  2.71608923e-02],
         [-1.84765607e-02, -1.45695759e-02, -1.64997559e-02,
           1.36569533e-02,  4.68912348e-02],
         [-3.82716879e-02,  4.39388789e-02, -5.53155988e-02,
           1.87769346e-02, -1.00198928e-02],
         [ 3.41114029e-02,  2.59040706e-02, -2.32953508e-03,
           1.68476310e-02,  2.07647812e-04]]],


       ...,


       [[[-4.06135060e-02, -5.47115020e-02, -3.17602418e-02,
          -8.82547756e-05, -2.39615440e-02],
         [ 1.72985885e-02,  5.09628244e-02,  2.54112892e-02,
          -3.72128785e-02, -2.70302203e-02],
         [-4.15715501e-02, -3.22653167e-02,  2.89532077e-02,
           4.57435995e-02,  2.81151813e-02],
         [ 1.89161208e-02,  5.47190607e-02, -7.53597217e-03,
           5.26738353e-02,  5.01881689e-02],
         [-1.82934497e-02, -3.44010815e-02, -4.64030467e-02,
           5.71830198e-02,  3.63587402e-03]],

        [[-3.07143163e-02,  1.04696192e-02, -6.34910632e-03,
           3.21541429e-02, -4.14563827e-02],
         [ 4.67801765e-02,  3.39796245e-02,  2.83430163e-02,
           4.90249917e-02, -2.11768001e-02],
         [ 2.61689145e-02, -5.17476834e-02, -1.66166387e-02,
           4.63947933e-03,  5.05663939e-02],
         [ 3.29911597e-02, -4.57033552e-02,  3.13661210e-02,
          -4.37311977e-02,  3.72848846e-02],
         [ 3.65913101e-02,  4.86152135e-02,  5.83035834e-02,
          -5.15589304e-02, -5.58276139e-02]],

        [[ 2.07092967e-02, -4.37568985e-02,  3.04185096e-02,
          -3.14597711e-02, -5.55392094e-02],
         [-5.25704250e-02, -9.16116964e-03,  4.37300354e-02,
           5.76177761e-02,  2.95298137e-02],
         [-4.84272987e-02,  5.75551204e-02, -5.00327796e-02,
          -3.60121503e-02,  3.45071666e-02],
         [-3.28941196e-02, -6.51492039e-03, -7.86117464e-03,
          -3.09312455e-02,  2.25447938e-02],
         [-3.71118858e-02,  2.67252349e-03,  3.36784683e-02,
          -5.86434966e-03,  4.89636026e-02]],

        ...,

        [[ 1.95453335e-02,  2.25035450e-03, -5.15454002e-02,
           3.52405123e-02,  1.24032712e-02],
         [ 2.46292334e-02,  4.33813408e-02, -2.83065848e-02,
           2.87291650e-02, -4.54260074e-02],
         [ 3.28528807e-02, -4.65513505e-02, -2.19159611e-02,
          -2.38341037e-02,  1.93282776e-02],
         [ 3.26961391e-02, -1.06849074e-02,  2.92793196e-02,
           2.76756454e-02, -5.29483110e-02],
         [ 1.42480098e-02,  3.50503549e-02,  7.43721332e-03,
          -3.14515419e-05, -4.04075865e-04]],

        [[-5.40945344e-02,  3.89965363e-02, -3.29612605e-02,
          -4.35319394e-02,  1.09950174e-02],
         [ 3.09788324e-02, -2.71756481e-02, -4.67283167e-02,
          -4.07947935e-02, -3.29897329e-02],
         [-4.52981815e-02,  5.55835757e-03, -6.05545938e-03,
           5.69906048e-02,  5.57449311e-02],
         [ 1.22830290e-02, -2.34215911e-02, -1.54525135e-02,
           1.28114410e-03, -1.52787138e-02],
         [ 5.33444919e-02, -3.32364365e-02,  3.03923711e-02,
           1.20799465e-03,  1.62171051e-02]],

        [[-2.28641462e-02,  5.55263311e-02,  2.90681142e-02,
          -1.65389813e-02,  3.80172138e-03],
         [-4.52038646e-02,  2.79645715e-02,  4.63979170e-02,
           1.97808519e-02,  2.78741214e-02],
         [-4.44116555e-02,  2.00235546e-02, -2.38372590e-02,
           3.34398337e-02,  1.46217120e-03],
         [ 2.56382283e-02, -2.61224080e-02,  4.73262928e-02,
          -2.69375816e-02, -3.50667164e-02],
         [-2.85133086e-02,  4.52753454e-02, -1.39446361e-02,
          -5.45643494e-02, -3.39656584e-02]]],


       [[[ 2.34060865e-02, -5.25391735e-02, -4.64135595e-02,
          -2.64051426e-02,  1.36264740e-02],
         [-5.84993958e-02,  3.88988331e-02, -4.43562008e-02,
          -3.19479853e-02,  4.46209982e-02],
         [ 5.50188422e-02, -2.19945516e-02,  9.02866200e-03,
           3.18072028e-02,  2.75677387e-02],
         [-2.31693648e-02, -5.59500791e-02, -5.66748828e-02,
          -4.49848957e-02,  6.05480932e-03],
         [ 5.32199070e-02,  5.30362129e-02, -1.55665074e-03,
          -6.97304553e-04, -5.43858558e-02]],

        [[-5.53585179e-02, -4.35407497e-02, -4.66162823e-02,
           5.93727268e-03, -7.45847682e-03],
         [-5.67770749e-02,  1.05324090e-02,  3.24122682e-02,
           9.37654730e-03, -5.84873706e-02],
         [ 1.71159413e-02,  5.48839830e-02,  4.58919778e-02,
           4.73652855e-02,  5.41716591e-02],
         [ 3.47370058e-02, -1.61064658e-02,  5.68732731e-02,
           2.16854317e-03,  2.54653767e-03],
         [-3.53270657e-02,  4.22926294e-03, -2.54964679e-02,
          -2.67623235e-02,  4.21946645e-02]],

        [[ 5.33919148e-02,  2.08061207e-02, -1.30341416e-02,
          -2.28865501e-02,  4.16321494e-02],
         [ 2.23580226e-02, -3.77741307e-02, -1.86651864e-03,
           8.92980490e-03,  2.24597566e-03],
         [-3.51268426e-02, -2.14432236e-02,  7.36053754e-03,
           2.09378656e-02, -2.13457216e-02],
         [-5.12514859e-02, -4.51632636e-03,  3.42527330e-02,
          -1.74462143e-02, -3.56381536e-02],
         [ 4.62659933e-02, -5.43788634e-02, -3.28431278e-02,
          -5.67761660e-02,  2.17721984e-02]],

        ...,

        [[-2.32438091e-02,  4.01991829e-02, -3.71015929e-02,
           7.75102701e-04,  2.58614752e-03],
         [ 8.81373230e-03, -3.93049791e-02,  3.84376124e-02,
           9.84051358e-03,  1.65678598e-02],
         [-2.97391955e-02, -4.91704158e-02,  2.01485418e-02,
           2.98273973e-02,  1.84901860e-02],
         [ 2.36838441e-02, -5.37105091e-02, -3.75053734e-02,
           8.84922221e-03,  1.83857251e-02],
         [-3.41379642e-02,  1.75272394e-02, -5.69474101e-02,
          -4.45985682e-02, -5.35383970e-02]],

        [[ 4.14389968e-02,  2.02035122e-02,  5.83517775e-02,
           4.20350693e-02, -6.55345852e-04],
         [ 4.49111089e-02, -4.77216952e-02,  4.22821119e-02,
           1.92253254e-02,  5.46818366e-03],
         [ 1.53672714e-02, -1.95067271e-03, -3.43338363e-02,
          -2.54547205e-02, -1.35741616e-02],
         [ 3.88908125e-02, -1.17141092e-02, -4.98690344e-02,
           8.67835153e-03, -1.09811854e-02],
         [-9.81098879e-03,  2.79872045e-02, -2.32155416e-02,
          -4.99010412e-03,  4.09976356e-02]],

        [[-2.03636149e-03,  2.79234275e-02, -1.54132890e-02,
          -1.40120657e-02,  2.39955783e-02],
         [ 6.45571109e-03, -3.98774147e-02, -1.44458031e-02,
           2.59985700e-02,  4.55840454e-02],
         [ 5.08197173e-02,  3.76841053e-02, -3.49449529e-03,
          -7.70734064e-03,  1.22750958e-03],
         [ 8.17736238e-03, -2.70835049e-02,  2.05019340e-02,
           2.55187061e-02, -2.85510607e-02],
         [-1.87546313e-02,  1.31882373e-02,  1.94612425e-02,
           5.27280122e-02, -3.59508917e-02]]],


       [[[ 4.46419604e-02,  3.65623273e-03,  4.31024805e-02,
           3.25043909e-02,  5.49612604e-02],
         [ 4.98545319e-02, -3.87304761e-02,  9.36442707e-03,
          -5.52090034e-02,  2.20495779e-02],
         [ 4.86062746e-03, -4.18331511e-02,  1.94874890e-02,
          -1.55648943e-02, -4.74765673e-02],
         [-5.82036749e-02,  1.24508943e-02,  3.39742191e-02,
          -3.04545811e-03, -1.59362257e-02],
         [ 2.99832057e-02, -5.78130968e-02,  3.58642638e-02,
          -4.14195769e-02, -2.41921954e-02]],

        [[ 1.33312624e-02,  3.58338580e-02, -4.13297191e-02,
           1.87714286e-02, -1.07182153e-02],
         [-2.85293683e-02, -1.24437166e-02, -1.35098090e-02,
           3.93138416e-02,  4.33189794e-03],
         [ 4.00104970e-02, -3.91123854e-02,  3.95351760e-02,
          -2.21449137e-02,  2.53689792e-02],
         [-1.23816004e-04,  1.15638021e-02,  1.66946575e-02,
           1.64111797e-02,  5.07509708e-02],
         [ 2.11468209e-02,  8.91378056e-03, -2.68819463e-02,
           3.91051136e-02, -2.44360156e-02]],

        [[-4.20761388e-03, -1.33257480e-02,  2.01835972e-03,
           5.48672900e-02, -5.34728989e-02],
         [ 2.75844871e-03, -3.45554017e-02, -4.36707251e-02,
           1.39096273e-05,  4.26413398e-03],
         [ 2.32325848e-02, -2.53707785e-02, -5.68916053e-02,
          -8.95973295e-03, -2.37699449e-02],
         [ 5.23635112e-02, -5.90438023e-03,  3.54180597e-02,
           5.52068241e-02, -5.03395014e-02],
         [ 1.98240224e-02,  3.76242287e-02, -5.75010963e-02,
          -4.86449413e-02,  1.48631195e-02]],

        ...,

        [[-3.11495010e-02,  3.55454423e-02, -4.97307768e-03,
           3.83709967e-02,  4.03113365e-02],
         [ 6.86316332e-03,  1.65921040e-02,  4.26399820e-02,
          -1.68355554e-02, -3.53414975e-02],
         [ 5.56704327e-02,  1.14131253e-02,  1.79703832e-02,
           2.04215944e-02, -2.34765168e-02],
         [-5.35005517e-03,  4.71104309e-02, -5.69823710e-03,
           4.71554697e-02, -2.26605143e-02],
         [-2.48403754e-02, -3.73214856e-02, -2.99155414e-02,
           8.80908407e-03,  4.22828346e-02]],

        [[-1.80159304e-02,  4.86601107e-02, -5.90968272e-03,
          -3.72622907e-02, -5.23912758e-02],
         [ 1.14017706e-02, -4.11464944e-02,  4.18090215e-03,
          -5.39906509e-02,  4.51052897e-02],
         [-2.70480346e-02,  2.21983660e-02,  1.32721160e-02,
           3.07428166e-02, -5.67499660e-02],
         [-4.85057048e-02,  3.85819487e-02, -2.62432415e-02,
          -4.84028123e-02, -3.71261761e-02],
         [-1.38418749e-02, -5.27185239e-02,  2.70800646e-02,
           1.92592684e-02,  4.85247932e-02]],

        [[-3.94300334e-02, -3.74629833e-02, -8.01944733e-03,
          -4.19440456e-02,  3.59021351e-02],
         [-3.40143368e-02, -4.41879742e-02, -4.36686985e-02,
          -2.23721582e-02,  5.69021851e-02],
         [-2.38548424e-02,  5.44040371e-03, -2.18689255e-02,
          -1.96526777e-02,  9.08688828e-03],
         [-5.34604974e-02, -2.46270038e-02,  3.52124148e-03,
          -8.64103343e-03,  4.76287156e-02],
         [-2.68487483e-02, -2.15874370e-02,  1.09860511e-03,
           4.40635113e-03,  2.46146019e-03]]]], dtype=float32), 'fc2_weight': <tvm.NDArray shape=(10, 1250), cpu(0)>
array([[ 0.0085928 ,  0.06376921,  0.0103371 , ...,  0.06241049,
         0.05440594,  0.03190864],
       [-0.0684488 , -0.0074242 ,  0.04281412, ...,  0.03925866,
        -0.00919849, -0.01829134],
       [ 0.06869291,  0.01066804, -0.05447127, ...,  0.00311872,
         0.05515239, -0.02636347],
       ...,
       [-0.05821246,  0.04122672, -0.01495097, ..., -0.00723544,
         0.05555219, -0.05206108],
       [ 0.0300721 ,  0.0117669 , -0.01609792, ...,  0.03920774,
        -0.00141991,  0.0521137 ],
       [-0.00806659, -0.03030686,  0.02905726, ...,  0.04499545,
        -0.01919783,  0.00338919]], dtype=float32), 'fc2_bias': <tvm.NDArray shape=(10,), cpu(0)>
array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)}
Waiting for requests..
